// Generated from SofaLang.g4 by ANTLR 4.1
package com.tehforce.sofa.parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SofaLangLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__37=1, T__36=2, T__35=3, T__34=4, T__33=5, T__32=6, T__31=7, T__30=8, 
		T__29=9, T__28=10, T__27=11, T__26=12, T__25=13, T__24=14, T__23=15, T__22=16, 
		T__21=17, T__20=18, T__19=19, T__18=20, T__17=21, T__16=22, T__15=23, 
		T__14=24, T__13=25, T__12=26, T__11=27, T__10=28, T__9=29, T__8=30, T__7=31, 
		T__6=32, T__5=33, T__4=34, T__3=35, T__2=36, T__1=37, T__0=38, INT=39, 
		ID=40, ARROW=41;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'Heal'", "'wounded'", "'Warrior'", "'('", "'alive'", "'Any'", "'<'", 
		"'!='", "'Down'", "'<='", "'Enemy'", "'otherwise'", "'range'", "'{'", 
		"'Healer'", "'Right'", "'closest'", "'maxhealth'", "'Roam'", "'}'", "'Up'", 
		"'Move'", "'.'", "')'", "'Friendly'", "'health'", "'Attack'", "'distance'", 
		"'>'", "'Left'", "'Ranger'", "'inRange'", "'=='", "'farthest'", "'oppositeDirection'", 
		"'direction'", "'>='", "'Defend'", "INT", "ID", "'->'"
	};
	public static final String[] ruleNames = {
		"T__37", "T__36", "T__35", "T__34", "T__33", "T__32", "T__31", "T__30", 
		"T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", "T__22", 
		"T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", 
		"T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
		"T__4", "T__3", "T__2", "T__1", "T__0", "INT", "ID", "ARROW"
	};


	public SofaLangLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
		removeErrorListeners();
		addErrorListener(new ErrorHandler());
	}

	@Override
	public String getGrammarFileName() { return "SofaLang.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\uacf5\uee8c\u4f5d\u8b0d\u4a45\u78bd\u1b2f\u3378\2+\u0142\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\3\2\3\2"+
		"\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t"+
		"\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17"+
		"\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36"+
		"\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!"+
		"\3!\3!\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$"+
		"\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\6(\u0137\n(\r(\16(\u0138\3)\6)\u013c\n"+
		")\r)\16)\u013d\3*\3*\3*\2+\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b\1\17\t\1"+
		"\21\n\1\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20\1\37\21\1!\22\1#\23"+
		"\1%\24\1\'\25\1)\26\1+\27\1-\30\1/\31\1\61\32\1\63\33\1\65\34\1\67\35"+
		"\19\36\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1I&\1K\'\1M(\1O)\1Q*\1S+\1\3\2\4"+
		"\3\2\62;\4\2C\\c|\u0143\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2"+
		"\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2"+
		"\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2"+
		"Q\3\2\2\2\2S\3\2\2\2\3U\3\2\2\2\5Z\3\2\2\2\7b\3\2\2\2\tj\3\2\2\2\13l\3"+
		"\2\2\2\rr\3\2\2\2\17v\3\2\2\2\21x\3\2\2\2\23{\3\2\2\2\25\u0080\3\2\2\2"+
		"\27\u0083\3\2\2\2\31\u0089\3\2\2\2\33\u0093\3\2\2\2\35\u0099\3\2\2\2\37"+
		"\u009b\3\2\2\2!\u00a2\3\2\2\2#\u00a8\3\2\2\2%\u00b0\3\2\2\2\'\u00ba\3"+
		"\2\2\2)\u00bf\3\2\2\2+\u00c1\3\2\2\2-\u00c4\3\2\2\2/\u00c9\3\2\2\2\61"+
		"\u00cb\3\2\2\2\63\u00cd\3\2\2\2\65\u00d6\3\2\2\2\67\u00dd\3\2\2\29\u00e4"+
		"\3\2\2\2;\u00ed\3\2\2\2=\u00ef\3\2\2\2?\u00f4\3\2\2\2A\u00fb\3\2\2\2C"+
		"\u0103\3\2\2\2E\u0106\3\2\2\2G\u010f\3\2\2\2I\u0121\3\2\2\2K\u012b\3\2"+
		"\2\2M\u012e\3\2\2\2O\u0136\3\2\2\2Q\u013b\3\2\2\2S\u013f\3\2\2\2UV\7J"+
		"\2\2VW\7g\2\2WX\7c\2\2XY\7n\2\2Y\4\3\2\2\2Z[\7y\2\2[\\\7q\2\2\\]\7w\2"+
		"\2]^\7p\2\2^_\7f\2\2_`\7g\2\2`a\7f\2\2a\6\3\2\2\2bc\7Y\2\2cd\7c\2\2de"+
		"\7t\2\2ef\7t\2\2fg\7k\2\2gh\7q\2\2hi\7t\2\2i\b\3\2\2\2jk\7*\2\2k\n\3\2"+
		"\2\2lm\7c\2\2mn\7n\2\2no\7k\2\2op\7x\2\2pq\7g\2\2q\f\3\2\2\2rs\7C\2\2"+
		"st\7p\2\2tu\7{\2\2u\16\3\2\2\2vw\7>\2\2w\20\3\2\2\2xy\7#\2\2yz\7?\2\2"+
		"z\22\3\2\2\2{|\7F\2\2|}\7q\2\2}~\7y\2\2~\177\7p\2\2\177\24\3\2\2\2\u0080"+
		"\u0081\7>\2\2\u0081\u0082\7?\2\2\u0082\26\3\2\2\2\u0083\u0084\7G\2\2\u0084"+
		"\u0085\7p\2\2\u0085\u0086\7g\2\2\u0086\u0087\7o\2\2\u0087\u0088\7{\2\2"+
		"\u0088\30\3\2\2\2\u0089\u008a\7q\2\2\u008a\u008b\7v\2\2\u008b\u008c\7"+
		"j\2\2\u008c\u008d\7g\2\2\u008d\u008e\7t\2\2\u008e\u008f\7y\2\2\u008f\u0090"+
		"\7k\2\2\u0090\u0091\7u\2\2\u0091\u0092\7g\2\2\u0092\32\3\2\2\2\u0093\u0094"+
		"\7t\2\2\u0094\u0095\7c\2\2\u0095\u0096\7p\2\2\u0096\u0097\7i\2\2\u0097"+
		"\u0098\7g\2\2\u0098\34\3\2\2\2\u0099\u009a\7}\2\2\u009a\36\3\2\2\2\u009b"+
		"\u009c\7J\2\2\u009c\u009d\7g\2\2\u009d\u009e\7c\2\2\u009e\u009f\7n\2\2"+
		"\u009f\u00a0\7g\2\2\u00a0\u00a1\7t\2\2\u00a1 \3\2\2\2\u00a2\u00a3\7T\2"+
		"\2\u00a3\u00a4\7k\2\2\u00a4\u00a5\7i\2\2\u00a5\u00a6\7j\2\2\u00a6\u00a7"+
		"\7v\2\2\u00a7\"\3\2\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa\7n\2\2\u00aa\u00ab"+
		"\7q\2\2\u00ab\u00ac\7u\2\2\u00ac\u00ad\7g\2\2\u00ad\u00ae\7u\2\2\u00ae"+
		"\u00af\7v\2\2\u00af$\3\2\2\2\u00b0\u00b1\7o\2\2\u00b1\u00b2\7c\2\2\u00b2"+
		"\u00b3\7z\2\2\u00b3\u00b4\7j\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7c\2\2"+
		"\u00b6\u00b7\7n\2\2\u00b7\u00b8\7v\2\2\u00b8\u00b9\7j\2\2\u00b9&\3\2\2"+
		"\2\u00ba\u00bb\7T\2\2\u00bb\u00bc\7q\2\2\u00bc\u00bd\7c\2\2\u00bd\u00be"+
		"\7o\2\2\u00be(\3\2\2\2\u00bf\u00c0\7\177\2\2\u00c0*\3\2\2\2\u00c1\u00c2"+
		"\7W\2\2\u00c2\u00c3\7r\2\2\u00c3,\3\2\2\2\u00c4\u00c5\7O\2\2\u00c5\u00c6"+
		"\7q\2\2\u00c6\u00c7\7x\2\2\u00c7\u00c8\7g\2\2\u00c8.\3\2\2\2\u00c9\u00ca"+
		"\7\60\2\2\u00ca\60\3\2\2\2\u00cb\u00cc\7+\2\2\u00cc\62\3\2\2\2\u00cd\u00ce"+
		"\7H\2\2\u00ce\u00cf\7t\2\2\u00cf\u00d0\7k\2\2\u00d0\u00d1\7g\2\2\u00d1"+
		"\u00d2\7p\2\2\u00d2\u00d3\7f\2\2\u00d3\u00d4\7n\2\2\u00d4\u00d5\7{\2\2"+
		"\u00d5\64\3\2\2\2\u00d6\u00d7\7j\2\2\u00d7\u00d8\7g\2\2\u00d8\u00d9\7"+
		"c\2\2\u00d9\u00da\7n\2\2\u00da\u00db\7v\2\2\u00db\u00dc\7j\2\2\u00dc\66"+
		"\3\2\2\2\u00dd\u00de\7C\2\2\u00de\u00df\7v\2\2\u00df\u00e0\7v\2\2\u00e0"+
		"\u00e1\7c\2\2\u00e1\u00e2\7e\2\2\u00e2\u00e3\7m\2\2\u00e38\3\2\2\2\u00e4"+
		"\u00e5\7f\2\2\u00e5\u00e6\7k\2\2\u00e6\u00e7\7u\2\2\u00e7\u00e8\7v\2\2"+
		"\u00e8\u00e9\7c\2\2\u00e9\u00ea\7p\2\2\u00ea\u00eb\7e\2\2\u00eb\u00ec"+
		"\7g\2\2\u00ec:\3\2\2\2\u00ed\u00ee\7@\2\2\u00ee<\3\2\2\2\u00ef\u00f0\7"+
		"N\2\2\u00f0\u00f1\7g\2\2\u00f1\u00f2\7h\2\2\u00f2\u00f3\7v\2\2\u00f3>"+
		"\3\2\2\2\u00f4\u00f5\7T\2\2\u00f5\u00f6\7c\2\2\u00f6\u00f7\7p\2\2\u00f7"+
		"\u00f8\7i\2\2\u00f8\u00f9\7g\2\2\u00f9\u00fa\7t\2\2\u00fa@\3\2\2\2\u00fb"+
		"\u00fc\7k\2\2\u00fc\u00fd\7p\2\2\u00fd\u00fe\7T\2\2\u00fe\u00ff\7c\2\2"+
		"\u00ff\u0100\7p\2\2\u0100\u0101\7i\2\2\u0101\u0102\7g\2\2\u0102B\3\2\2"+
		"\2\u0103\u0104\7?\2\2\u0104\u0105\7?\2\2\u0105D\3\2\2\2\u0106\u0107\7"+
		"h\2\2\u0107\u0108\7c\2\2\u0108\u0109\7t\2\2\u0109\u010a\7v\2\2\u010a\u010b"+
		"\7j\2\2\u010b\u010c\7g\2\2\u010c\u010d\7u\2\2\u010d\u010e\7v\2\2\u010e"+
		"F\3\2\2\2\u010f\u0110\7q\2\2\u0110\u0111\7r\2\2\u0111\u0112\7r\2\2\u0112"+
		"\u0113\7q\2\2\u0113\u0114\7u\2\2\u0114\u0115\7k\2\2\u0115\u0116\7v\2\2"+
		"\u0116\u0117\7g\2\2\u0117\u0118\7F\2\2\u0118\u0119\7k\2\2\u0119\u011a"+
		"\7t\2\2\u011a\u011b\7g\2\2\u011b\u011c\7e\2\2\u011c\u011d\7v\2\2\u011d"+
		"\u011e\7k\2\2\u011e\u011f\7q\2\2\u011f\u0120\7p\2\2\u0120H\3\2\2\2\u0121"+
		"\u0122\7f\2\2\u0122\u0123\7k\2\2\u0123\u0124\7t\2\2\u0124\u0125\7g\2\2"+
		"\u0125\u0126\7e\2\2\u0126\u0127\7v\2\2\u0127\u0128\7k\2\2\u0128\u0129"+
		"\7q\2\2\u0129\u012a\7p\2\2\u012aJ\3\2\2\2\u012b\u012c\7@\2\2\u012c\u012d"+
		"\7?\2\2\u012dL\3\2\2\2\u012e\u012f\7F\2\2\u012f\u0130\7g\2\2\u0130\u0131"+
		"\7h\2\2\u0131\u0132\7g\2\2\u0132\u0133\7p\2\2\u0133\u0134\7f\2\2\u0134"+
		"N\3\2\2\2\u0135\u0137\t\2\2\2\u0136\u0135\3\2\2\2\u0137\u0138\3\2\2\2"+
		"\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139P\3\2\2\2\u013a\u013c\t"+
		"\3\2\2\u013b\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013b\3\2\2\2\u013d"+
		"\u013e\3\2\2\2\u013eR\3\2\2\2\u013f\u0140\7/\2\2\u0140\u0141\7@\2\2\u0141"+
		"T\3\2\2\2\5\2\u0138\u013d";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}